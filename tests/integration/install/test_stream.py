import io
import tempfile
from contextlib import redirect_stdout

from mblm.utils.stream import ByteStreamer

origin_text_str = "👉🏽 bytes generated by a 🤖"
origin_text_b = (
    b"\xf0\x9f\x91\x89\xf0\x9f\x8f\xbd bytes generated by a \xf0\x9f\xa4\x96"
)


class MBLM:
    """Mock interface for tests with absorb kwargs"""

    def __init__(self, *args, **kwargs):
        pass

    def generate(self, stream: ByteStreamer):
        for b in origin_text_b:
            if stream:
                stream.write(b)


def create_mblm(*args, **kwargs):
    return MBLM(...)


class TestStream:
    def _assert_valid_test(self):
        assert origin_text_str.encode("utf8") == origin_text_b

    def _test_stream_binary(self, root_dir: str):
        from pathlib import Path

        from mblm.utils.stream import ByteStreamer

        mblm = create_mblm(...)

        # any modality that the model learns to output - .png, .txt, .bin, etc.
        file_path = Path(root_dir) / "output.txt"

        # open in binary mode and write raw bytes
        with Path(file_path).open("wb") as file:
            with ByteStreamer(stream=file) as streamer:
                mblm.generate(streamer)

        # we can open the file and interprete its content as UTF-8
        with Path(file_path).open("r", encoding="utf8") as file:
            assert file.read() == "👉🏽 bytes generated by a 🤖"

    def _test_stream_stdout_utf8(self, captured_stdout: io.StringIO):
        import sys

        from mblm.utils.stream import ByteStreamer

        mblm = create_mblm(...)

        with ByteStreamer(stream=sys.stdout, decode_utf8=True) as streamer:
            mblm.generate(streamer)

        # Streams the decoded bytes to the terminal:
        # 👉🏽 bytes generated by a 🤖

        captured_stdout.seek(0)
        assert captured_stdout.read() == "👉🏽 bytes generated by a 🤖"

    def _test_stream_stdout(self, captured_stdout: io.StringIO):
        import sys

        from mblm.utils.stream import ByteStreamer

        mblm = create_mblm(...)

        with ByteStreamer(stream=sys.stdout) as streamer:
            mblm.generate(streamer)

        # Streams the bytes as integers to the terminal:
        # 240 159 145 ...0 159 164 150

        captured_stdout.seek(0)
        result = captured_stdout.read()
        assert result.startswith("240 159 145 137 240")
        assert result.endswith("32 240 159 164 150")

    def test_all(self):
        self._assert_valid_test()

        with tempfile.TemporaryDirectory() as tmp_dir:
            self._test_stream_binary(tmp_dir)

        for run_test in (
            self._test_stream_stdout_utf8,
            self._test_stream_stdout,
        ):
            buff = io.StringIO()
            with redirect_stdout(buff):
                run_test(buff)

        return
        return
