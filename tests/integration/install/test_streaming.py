import binascii
import io
import tempfile
import typing
from contextlib import redirect_stdout

from mblm.utils.stream import ByteStreamer

if typing.TYPE_CHECKING:
    from torch import Tensor

origin_text_str = "👉🏽 bytes generated by a 🤖"
origin_text_hexified = b"f0 9f 91 89 f0 9f 8f bd 20 62 79 74 65 73 20 67 65 6e 65 72 61 74 65 64 20 62 79 20 61 20 f0 9f a4 96"
origin_text_num_bytes = "240 159 145 137 240 159 143 189 32 98 121 116 101 115 32 103 101 110 101 114 97 116 101 100 32 98 121 32 97 32 240 159 164 150"


class MockMBLM:
    """Dummy MBLM class with a generation interface and predefined
    tokens that are generated"""

    def generate(
        self,
        _: Tensor | None = None,
        stream: ByteStreamer | None = None,
    ):
        """Mirror keyword arguments from the actual signature"""
        for b in origin_text_str.encode("utf8"):
            if stream:
                stream.write(b)


def create_mblm(*args, **kwargs):
    """For streaming and generation documentation, we don't want too much overhead with model creation and use this fake MBLM initializer instead"""
    return MockMBLM()


class TestStream:
    def _assert_valid_test(self):
        """Test the readme examples"""
        assert (
            binascii.hexlify(origin_text_str.encode(), sep=" ")
            == origin_text_hexified
        )
        assert (
            " ".join(map(str, origin_text_str.encode("utf8")))
            == origin_text_num_bytes
        )

    def _test_stream_binary(self, root_dir: str):
        from pathlib import Path

        from mblm.utils.stream import ByteStreamer

        mblm = create_mblm(...)

        # any modality that the model learns to output - .png, .txt, .bin, etc.
        file_path = Path(root_dir) / "output.txt"

        # open in binary mode and write raw bytes
        with Path(file_path).open("wb") as file:
            with ByteStreamer(stream=file) as streamer:
                mblm.generate(stream=streamer)

        # we can open the file and interprete its content as UTF-8
        with Path(file_path).open("r", encoding="utf8") as file:
            assert file.read() == "👉🏽 bytes generated by a 🤖"

    def _test_stream_stdout(self, captured_stdout: io.StringIO):
        import sys

        from mblm.utils.stream import ByteStreamer

        mblm = create_mblm(...)

        # approach 1: stream to stdout and decode on the fly
        with ByteStreamer(stream=sys.stdout, decode_utf8=True) as streamer:
            mblm.generate(stream=streamer)

        # streams the decoded bytes to the terminal:
        # 👉🏽 bytes generated by a 🤖

        assert captured_stdout.getvalue() == "👉🏽 bytes generated by a 🤖"
        # reset buffer in between tests
        captured_stdout.seek(0)
        captured_stdout.truncate()

        # approach 2: stream raw output to stdout
        with ByteStreamer(stream=sys.stdout) as streamer:
            mblm.generate(stream=streamer)

        # streams the bytes as integers to the terminal:
        # 240 159 145 ...0 159 164 150

        result = captured_stdout.getvalue()
        assert result.startswith("240 159 145 137 240")
        assert result.endswith("32 240 159 164 150")

    def test_all(self):
        self._assert_valid_test()

        with tempfile.TemporaryDirectory() as tmp_dir:
            self._test_stream_binary(tmp_dir)

        buff = io.StringIO()
        with redirect_stdout(buff):
            self._test_stream_stdout(buff)
