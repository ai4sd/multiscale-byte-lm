__copyright__ = """MIT License

Copyright (c) 2024 - IBM Research

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE."""

import re
from datetime import datetime
from pathlib import Path
from typing import cast

import torch
from pydantic import BaseModel

from mblm import MBLM, MBLMReturnType
from mblm.analysis.utils import load_model
from mblm.data.dataset.pg19 import PG19
from mblm.data.types import ModelMode
from mblm.data.utils import Bytes
from mblm.utils.io import NDJSONWriter
from mblm.utils.seed import seed_everything

DEVICE = "cuda"
DATASET_MODE = ModelMode.VALID
# dot, whitespace, uppercase, 1+ lowercase, whitespace, 1+ lowercase
START_OF_SENTENCE_RE = re.compile(r"\.\s[A-Z][a-z]{1,}\s[a-z]{1,}")


class PG19ModelGeneration(BaseModel):
    id_model: str
    book_id: str
    book_txt_offset: int
    ctx_len: int
    generated: list[int]
    truth: list[int]
    ce: float
    generation_time: float
    timestamp: str


def seek_to_start_of_sentence(text: str) -> int | None:
    start_of_sentence = START_OF_SENTENCE_RE.search(text)
    if start_of_sentence:
        return start_of_sentence.start() + 2  # ignore dot and whitespace
    return None


def get_pg19_samples(
    pg19: PG19, max_num_samples: int, ctx_len: int
) -> list[tuple[str, int, torch.Tensor]]:
    samples: list[tuple[str, int, torch.Tensor]] = []
    seed_everything(8)
    for book_id, book_as_str in pg19.iter_books(shuffle=False):
        offset = seek_to_start_of_sentence(book_as_str)
        if offset is None:
            continue
        book_as_tensor = Bytes.str_to_tensor(book_as_str[offset:])
        if len(book_as_tensor) >= ctx_len:
            samples.append((book_id, offset, book_as_tensor))
        if len(samples) == max_num_samples:
            break

    return samples


@torch.inference_mode()
@torch.autocast(device_type=DEVICE)
def sample_generation(
    output_file: Path,
    model: MBLM,
    model_id: str,
    max_num_samples: int,
    ctx_len: int,
    generation_len: int,
) -> None:
    writer = NDJSONWriter[PG19ModelGeneration](output_file)

    samples = get_pg19_samples(pg19, max_num_samples, ctx_len)
    num_available_samples = len(samples)
    if max_num_samples < num_available_samples:
        print(
            f"Warning, context length {ctx_len}: Only {num_available_samples}"
            f"available ({max_num_samples} requested)"
        )
    else:
        print(f"{num_available_samples} samples for context length {ctx_len}")

    for i, (book_id, book_txt_offset, book_as_tensor) in enumerate(samples):
        print(f"\t[{i}] Book {book_id}, start time: {datetime.now()}")

        # write a temporary line to indicate we've tried generation
        writer.write_line(
            PG19ModelGeneration(
                id_model=model_id,
                book_id=book_id,
                book_txt_offset=book_txt_offset,
                ctx_len=ctx_len,
                generated=[],
                truth=[],
                ce=-1,
                generation_time=-1,
                timestamp=str(datetime.now()),
            )
        )

        prompt_len = ctx_len - generation_len
        prompt = book_as_tensor[:prompt_len].long().to(DEVICE)
        ground_truth = book_as_tensor[prompt_len : prompt_len + generation_len]

        torch.cuda.empty_cache()

        # warmup
        _ = model.forward_empty(1)

        start_time = datetime.now()
        gen_bytes = model.generate(
            prompt,
            temperature=0.9,
            filter_thres=0.9,
            num_tokens_to_generate=generation_len,
        )
        generation_time = datetime.now() - start_time
        # feed the generated bytes back into the model (with additional
        # batch dim) to get the loss associated with this generation
        loss_tensor = model.forward(gen_bytes.unsqueeze(0), return_type=MBLMReturnType.LOSS)
        loss_tensor = cast(torch.Tensor, loss_tensor)
        loss = float(loss_tensor.item())
        generated = gen_bytes[prompt_len:].tolist()
        assert len(generated) == generation_len

        # remove the last line and write the actual result
        writer.remove_last_line()
        writer.write_line(
            PG19ModelGeneration(
                id_model=model_id,
                book_id=book_id,
                book_txt_offset=book_txt_offset,
                ctx_len=ctx_len,
                generated=generated,
                truth=ground_truth.tolist(),
                ce=loss,
                generation_time=generation_time.total_seconds(),
                timestamp=str(datetime.now()),
            )
        )
        print(f"\t[{i}] Book {book_id}, generation time: {generation_time.total_seconds()}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--pg19-dir",
        dest="pg19_dir",
        type=Path,
    )
    parser.add_argument(
        "--out-file",
        dest="output_file",
        type=Path,
    )
    parser.add_argument(
        "--model-dir",
        dest="model_dir",
        type=Path,
    )
    parser.add_argument(
        "--model-id",
        dest="model_id",
        type=str,
    )
    parser.add_argument(
        "--max-num-samples",
        dest="max_num_samples",
        type=int,
    )
    parser.add_argument(
        "--generation-len",
        dest="generation_len",
        type=int,
    )
    parser.add_argument(
        "--ctx-len",
        dest="ctx_len",
        action="extend",
        nargs="+",
        type=int,
    )

    args = parser.parse_args()
    model_id: str = args.model_id
    output_file: Path = args.output_file
    model_dir: Path = args.model_dir
    max_num_samples: int = args.max_num_samples
    generation_len: int = args.generation_len
    ctx_lens: list[int] = args.ctx_len

    pg19 = PG19(
        args.pg19_dir,
        mode=DATASET_MODE,
        seq_len=500_000,  # does not strictly matter
        num_workers=1,
        worker_id=0,
        display_load_progress=False,
    )

    print(f"Model: {model_id}, context lengths: {ctx_lens}")

    for ctx_len in ctx_lens:
        model, model_config = load_model(model_id=model_id, model_dir=model_dir, device=DEVICE)
        model.eval()
        sample_generation(
            output_file=output_file,
            model=model,
            model_id=model_id,
            max_num_samples=max_num_samples,
            ctx_len=ctx_len,
            generation_len=generation_len,
        )
